package v1

import (
	"context"
	"reflect"
	"strings"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"

	_ "github.com/tmrrwnxtsn/ecomway/api/swagger/gateway/v1" // generated by Swag CLI, you have to import it
	"github.com/tmrrwnxtsn/ecomway/internal/pkg/model"
)

type MethodService interface {
	AvailableMethods(ctx context.Context, opType model.OperationType, userID int64, currency string) ([]model.Method, error)
}

type PaymentService interface {
	Create(ctx context.Context, data model.CreatePaymentData) (model.CreatePaymentResult, error)
}

type ToolService interface {
	AvailableTools(ctx context.Context, userID int64) ([]*model.Tool, error)
	AvailableToolsGroupedByMethod(ctx context.Context, userID int64) (map[string][]*model.Tool, error)
	EditTool(ctx context.Context, id string, userID int64, externalMethod, name string) (*model.Tool, error)
}

type PayoutService interface {
	Create(ctx context.Context, data model.CreatePayoutData) (model.CreatePayoutResult, error)
}

type Handler struct {
	methodService  MethodService
	paymentService PaymentService
	toolService    ToolService
	payoutService  PayoutService
	validate       *validator.Validate
	apiKey         string
}

type HandlerOptions struct {
	MethodService  MethodService
	PaymentService PaymentService
	ToolService    ToolService
	PayoutService  PayoutService
	APIKey         string
}

// NewHandler godoc
//
// @title						Платежный шлюз для E-commerce системы
// @version					1.0
//
// @contact.name				Курмыза Павел
// @contact.email				tmrrwnxtsn@gmail.com
//
// @host						localhost:8080
// @BasePath					/api/v1
//
// @securityDefinitions.apikey	ApiKeyAuth
// @in							header
// @name						Authorization
// @description				Секретный ключ
func NewHandler(opts HandlerOptions) *Handler {
	validate := validator.New()
	validate.RegisterTagNameFunc(func(fld reflect.StructField) string {
		name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]
		if name != "-" && name != "" {
			return name
		}

		name = strings.SplitN(fld.Tag.Get("query"), ",", 2)[0]
		if name != "-" && name != "" {
			return name
		}

		return ""
	})

	return &Handler{
		methodService:  opts.MethodService,
		paymentService: opts.PaymentService,
		toolService:    opts.ToolService,
		payoutService:  opts.PayoutService,
		validate:       validate,
		apiKey:         opts.APIKey,
	}
}

func (h *Handler) Init(router fiber.Router) {
	router.Get("/swagger/*", swagger.HandlerDefault)

	apiV1 := router.Group("/api/v1")
	apiV1.Use(h.authorizationMiddleware())
	{
		payment := apiV1.Group("/payment")
		{
			payment.Get("/methods", h.paymentMethods)
			payment.Post("/create", h.paymentCreate)
		}

		payout := apiV1.Group("/payout")
		{
			payout.Get("/methods", h.payoutMethods)
			payout.Post("/create", h.payoutCreate)
			payout.Put("/confirm", h.payoutConfirm)
			payout.Put("/resendCode", h.payoutResendCode)
		}

		tools := apiV1.Group("/tool")
		{
			tools.Get("/list", h.toolList)
			tools.Put("/edit", h.toolEdit)
			tools.Delete("/remove", h.toolRemove)
		}
	}
}
