package v1

import (
	"context"
	"reflect"
	"strings"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"

	_ "github.com/tmrrwnxtsn/ecomway/api/swagger/report/v1" // generated by Swag CLI, you have to import it
	"github.com/tmrrwnxtsn/ecomway/internal/pkg/model"
)

type OperationService interface {
	Operations(ctx context.Context, userID int64) ([]model.Operation, error)
}

type Translator interface {
	Translate(lang, key string, args ...any) string
}

type Handler struct {
	operationService OperationService
	translator       Translator
	validate         *validator.Validate
	apiKey           string
}

type HandlerOptions struct {
	OperationService OperationService
	Translator       Translator
	APIKey           string
}

// NewHandler godoc
//
//	@title						Шлюз финансовой отчетности E-commerce системы
//	@version					1.0
//
//	@contact.name				Курмыза Павел
//	@contact.email				tmrrwnxtsn@gmail.com
//
//	@host						localhost:8081
//	@BasePath					/api/v1
//
//	@securityDefinitions.apikey	ApiKeyAuth
//	@in							header
//	@name						Authorization
//	@description				Секретный ключ
func NewHandler(opts HandlerOptions) *Handler {
	validate := validator.New()
	validate.RegisterTagNameFunc(func(fld reflect.StructField) string {
		name := strings.SplitN(fld.Tag.Get("json"), ",", 2)[0]
		if name != "-" && name != "" {
			return name
		}

		name = strings.SplitN(fld.Tag.Get("query"), ",", 2)[0]
		if name != "-" && name != "" {
			return name
		}

		return ""
	})

	return &Handler{
		operationService: opts.OperationService,
		translator:       opts.Translator,
		validate:         validate,
		apiKey:           opts.APIKey,
	}
}

func (h *Handler) Init(router fiber.Router) {
	router.Get("/swagger/*", swagger.HandlerDefault)

	apiV1 := router.Group("/api/v1")

	{
		apiV1.Use(recover.New())
		apiV1.Use(h.authorizationMiddleware())
	}

	{
		operations := apiV1.Group("/operation")
		{
			operations.Get("/list", h.operationList)
		}
	}

	{
		tool := apiV1.Group("/tool")
		{
			tool.Get("/list", h.operationList)
		}
	}
}
