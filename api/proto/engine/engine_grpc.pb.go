// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: api/proto/engine/engine.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EngineService_AvailableMethods_FullMethodName = "/engine.EngineService/AvailableMethods"
	EngineService_CreatePayment_FullMethodName    = "/engine.EngineService/CreatePayment"
	EngineService_AvailableTools_FullMethodName   = "/engine.EngineService/AvailableTools"
	EngineService_CreatePayout_FullMethodName     = "/engine.EngineService/CreatePayout"
	EngineService_EditTool_FullMethodName         = "/engine.EngineService/EditTool"
	EngineService_RemoveTool_FullMethodName       = "/engine.EngineService/RemoveTool"
	EngineService_ReportOperations_FullMethodName = "/engine.EngineService/ReportOperations"
)

// EngineServiceClient is the client API for EngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineServiceClient interface {
	AvailableMethods(ctx context.Context, in *AvailableMethodsRequest, opts ...grpc.CallOption) (*AvailableMethodsResponse, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	AvailableTools(ctx context.Context, in *AvailableToolsRequest, opts ...grpc.CallOption) (*AvailableToolsResponse, error)
	CreatePayout(ctx context.Context, in *CreatePayoutRequest, opts ...grpc.CallOption) (*CreatePayoutResponse, error)
	EditTool(ctx context.Context, in *EditToolRequest, opts ...grpc.CallOption) (*EditToolResponse, error)
	RemoveTool(ctx context.Context, in *RemoveToolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportOperations(ctx context.Context, in *ReportOperationsRequest, opts ...grpc.CallOption) (*ReportOperationsResponse, error)
}

type engineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineServiceClient(cc grpc.ClientConnInterface) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) AvailableMethods(ctx context.Context, in *AvailableMethodsRequest, opts ...grpc.CallOption) (*AvailableMethodsResponse, error) {
	out := new(AvailableMethodsResponse)
	err := c.cc.Invoke(ctx, EngineService_AvailableMethods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, EngineService_CreatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) AvailableTools(ctx context.Context, in *AvailableToolsRequest, opts ...grpc.CallOption) (*AvailableToolsResponse, error) {
	out := new(AvailableToolsResponse)
	err := c.cc.Invoke(ctx, EngineService_AvailableTools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) CreatePayout(ctx context.Context, in *CreatePayoutRequest, opts ...grpc.CallOption) (*CreatePayoutResponse, error) {
	out := new(CreatePayoutResponse)
	err := c.cc.Invoke(ctx, EngineService_CreatePayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) EditTool(ctx context.Context, in *EditToolRequest, opts ...grpc.CallOption) (*EditToolResponse, error) {
	out := new(EditToolResponse)
	err := c.cc.Invoke(ctx, EngineService_EditTool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) RemoveTool(ctx context.Context, in *RemoveToolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EngineService_RemoveTool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) ReportOperations(ctx context.Context, in *ReportOperationsRequest, opts ...grpc.CallOption) (*ReportOperationsResponse, error) {
	out := new(ReportOperationsResponse)
	err := c.cc.Invoke(ctx, EngineService_ReportOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServiceServer is the server API for EngineService service.
// All implementations must embed UnimplementedEngineServiceServer
// for forward compatibility
type EngineServiceServer interface {
	AvailableMethods(context.Context, *AvailableMethodsRequest) (*AvailableMethodsResponse, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	AvailableTools(context.Context, *AvailableToolsRequest) (*AvailableToolsResponse, error)
	CreatePayout(context.Context, *CreatePayoutRequest) (*CreatePayoutResponse, error)
	EditTool(context.Context, *EditToolRequest) (*EditToolResponse, error)
	RemoveTool(context.Context, *RemoveToolRequest) (*emptypb.Empty, error)
	ReportOperations(context.Context, *ReportOperationsRequest) (*ReportOperationsResponse, error)
	mustEmbedUnimplementedEngineServiceServer()
}

// UnimplementedEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServiceServer struct {
}

func (UnimplementedEngineServiceServer) AvailableMethods(context.Context, *AvailableMethodsRequest) (*AvailableMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableMethods not implemented")
}
func (UnimplementedEngineServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedEngineServiceServer) AvailableTools(context.Context, *AvailableToolsRequest) (*AvailableToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableTools not implemented")
}
func (UnimplementedEngineServiceServer) CreatePayout(context.Context, *CreatePayoutRequest) (*CreatePayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayout not implemented")
}
func (UnimplementedEngineServiceServer) EditTool(context.Context, *EditToolRequest) (*EditToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTool not implemented")
}
func (UnimplementedEngineServiceServer) RemoveTool(context.Context, *RemoveToolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTool not implemented")
}
func (UnimplementedEngineServiceServer) ReportOperations(context.Context, *ReportOperationsRequest) (*ReportOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOperations not implemented")
}
func (UnimplementedEngineServiceServer) mustEmbedUnimplementedEngineServiceServer() {}

// UnsafeEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServiceServer will
// result in compilation errors.
type UnsafeEngineServiceServer interface {
	mustEmbedUnimplementedEngineServiceServer()
}

func RegisterEngineServiceServer(s grpc.ServiceRegistrar, srv EngineServiceServer) {
	s.RegisterService(&EngineService_ServiceDesc, srv)
}

func _EngineService_AvailableMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).AvailableMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_AvailableMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).AvailableMethods(ctx, req.(*AvailableMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_AvailableTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).AvailableTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_AvailableTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).AvailableTools(ctx, req.(*AvailableToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_CreatePayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).CreatePayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_CreatePayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).CreatePayout(ctx, req.(*CreatePayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_EditTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).EditTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_EditTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).EditTool(ctx, req.(*EditToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_RemoveTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).RemoveTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_RemoveTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).RemoveTool(ctx, req.(*RemoveToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_ReportOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).ReportOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_ReportOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).ReportOperations(ctx, req.(*ReportOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineService_ServiceDesc is the grpc.ServiceDesc for EngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableMethods",
			Handler:    _EngineService_AvailableMethods_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _EngineService_CreatePayment_Handler,
		},
		{
			MethodName: "AvailableTools",
			Handler:    _EngineService_AvailableTools_Handler,
		},
		{
			MethodName: "CreatePayout",
			Handler:    _EngineService_CreatePayout_Handler,
		},
		{
			MethodName: "EditTool",
			Handler:    _EngineService_EditTool_Handler,
		},
		{
			MethodName: "RemoveTool",
			Handler:    _EngineService_RemoveTool_Handler,
		},
		{
			MethodName: "ReportOperations",
			Handler:    _EngineService_ReportOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/engine/engine.proto",
}
